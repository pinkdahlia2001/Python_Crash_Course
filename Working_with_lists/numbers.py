for value in range(1,5):
    print(value) # Python will only print off the numbers 1-4, due to the off-by-one behaviour, it will start counting from the first number given and stops at the second.
# range() generates a series of numbers.

numbers = list(range(1,6)) # wrapping list() around range() creates a list of numbers.
print(numbers)

even_numbers = list(range(2,11,2)) # start = 2, stop = 11, step = 2, so every second number. the stop is not included in the result.
print(even_numbers)

squares = [] # Empty list to store the square of each number as the loop iterates over the range.
for value in range(1,11): # Loop iterates over the sequence generated by range()
    square= value**2 
    squares.append(square) # Adds the item to the end of the list
print(squares)

squares = []
for value in range(1,11):
    squares.append(value**2)
print(squares) # More concise while still using append()

cubes = [value**3 for value in range(1,11)] # This is a list comprehension, a.k.a. a cleaner way to get the same result.
print(cubes)

# Use .append() method when more flexibility inside the loop is needed, e.g. complex logic, multiple operations per iteration...etc.
# Use list comprehensions for simple transformations or filtering that can be expressed in a single line.

digits = list(range(1,101)) # don't forget -1 rule.
print(min(digits))
print(max(digits))
print(sum(digits))
